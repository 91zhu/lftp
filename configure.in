dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.13)
AC_INIT(src/ftpclass.cc)
AM_INIT_AUTOMAKE(lftp, 2.2.4)
AM_CONFIG_HEADER(include/config.h)

dnl iumacros.m4 is stolen from inetutils-1.3a
builtin(include,iumacros.m4)

dnl Default AC_C_INLINE does not know about C++
builtin(define,[AC_C_INLINE],[LFTP_C_INLINE])

LIBOBJS=''
AC_SUBST(LIBOBJS)

test -z "$CXX"	     && DEFAULT_CXX=yes
test -z "$CFLAGS"    && DEFAULT_CFLAGS=yes
test -z "$CXXFLAGS"  && DEFAULT_CXXFLAGS=yes
test -z "$LDFLAGS"   && DEFAULT_LDFLAGS=yes

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_YACC

if test x$ac_cv_lib_fl_yywrap = xno; then
   AC_DEFINE(NEED_YYWRAP)
fi


ALL_LINGUAS="es ru it pt_BR pl de zh_CN ko"
AM_GNU_GETTEXT
if test x$USE_INCLUDED_LIBINTL = xyes; then
   LINK_SRC="$LINK_SRC intl/libgettext.h"
   LINK_DST="$LINK_DST include/libintl.h"
fi
test "$MSGFMT"  = "no" && MSGFMT  ="$missing_dir/missing msgfmt"
test "$GMSGFMT" = "no" && GMSGFMT ="$missing_dir/missing msgfmt"
test "$XGETTEXT" = ":" && XGETTEXT="$missing_dir/missing xgettext"

if test x$gt_cv_func_gettext_libintl = xyes; then
   case "$LIBS" in
   *-lintl*)   ;;
   *)	       LIBS="$LIBS -lintl";;
   esac
fi

CXX_DYNAMIC_INITIALIZERS
AC_ARG_PROGRAM

AC_ARG_WITH(debug,
[  --with-debug            enable debug info],
[   with_debug=$withval;   ],
[   with_debug=no;	   ])

if test x$with_debug = xno; then
   if test x$DEFAULT_CFLAGS = xyes; then
      CFLAGS="`echo $CFLAGS | sed 's/-g//'`"
      if test -z "$CFLAGS"; then
	 CFLAGS=-O
      fi
   fi
   if test x$DEFAULT_CXXFLAGS = xyes; then
      CXXFLAGS="`echo $CXXFLAGS | sed 's/-g//'`"
      if test -z "$CXXFLAGS"; then
	 CXXFLAGS=-O
      fi
   fi
   if test x$DEFAULT_LDFLAGS = xyes; then
      LDFLAGS="$LDFLAGS -s"
   fi
fi

if test x$GCC = xyes; then
   CFLAGS="$CFLAGS -Wall"
fi
if test x$GXX = xyes; then
   CXXFLAGS="$CXXFLAGS -Wall -Wwrite-strings -Woverloaded-virtual"
   # save some bytes
   LFTP_CHECK_CXX_FLAGS([-fno-exceptions -fno-rtti])
   if test x$DEFAULT_CXX = xyes; then
      LFTP_PROG_CXXLINK
   fi
   # checl for -fno-implement-inline
   LFTP_NOIMPLEMENTINLINE
fi

AC_PROG_LIBTOOL

## get the values out of libtool
eval `grep '^wl=' libtool`
eval `grep '^export_dynamic_flag_spec=' libtool`
eval `grep '^pic_flag=' libtool`
eval EXPORT_DYNAMIC=\"$export_dynamic_flag_spec\"
AC_SUBST(EXPORT_DYNAMIC)
PIC_FLAG="$pic_flag"
AC_SUBST(PIC_FLAG)


AC_ARG_WITH(socks,
[  --with-socks            build with SOCKSv4 library],
[  with_socks=$withval;	],
[  with_socks=no;	])
if test x$with_socks = xyes; then
   AC_DEFINE(SOCKS4)
   SOCKSLIBS=-lsocks
fi

AC_ARG_WITH(socks5,
[  --with-socks5           build with SOCKSv5 library],
[  with_socks5=$withval;],
[  with_socks5=no;	])
if test x$with_socks5 = xyes; then
   AC_DEFINE(SOCKS5)
   SOCKSLIBS=-lsocks5
fi

AC_ARG_WITH(socksdante,
[  --with-socksdante       build with SOCKS-Dante library],
[  with_socksdante=$withval;],
[  with_socksdante=no;	])
if test x$with_socksdante = xyes; then
   AC_DEFINE(SOCKS_DANTE)
   SOCKSLIBS=-lsocks
fi
AC_SUBST(SOCKSLIBS)

AC_ARG_WITH(modules,
[  --with-modules          build modular lftp (protocols become dll's)],
[  with_modules=$withval;  ],
[  with_modules=no;	   ])

if test "$with_modules" = yes; then
   AC_DEFINE(WITH_MODULES)
   MODULES="proto-ftp.so proto-http.so proto-file.so cmd-mirror.so cmd-sleep.so"
fi
AC_SUBST(MODULES)

dnl Checks for libraries.
AC_SEARCH_LIBS(exp,m)
dnl This won't work for glibc2
dnl AC_SEARCH_LIBS(md5_process_bytes,crypt,[AC_DEFINE(HAVE_MD5)])
AC_SEARCH_LIBS(socket,socket)
AC_SEARCH_LIBS(gethostbyname,nsl)
AC_SEARCH_LIBS(dlopen,dl,[AC_DEFINE(HAVE_DLOPEN)])
AC_SEARCH_LIBS(res_search,resolv bind,[AC_DEFINE(HAVE_RES_SEARCH)])
IU_CHECK_DECL(res_search, [
     #include <stdio.h>
     #include <sys/types.h>
     #include <netinet/in.h>
     #include <arpa/nameser.h>
     #include <resolv.h>
])

AC_ARG_WITH(libresolv, [  --without-libresolv     don't use libresolv],
      [with_libresolv=$withval], [with_libresolv=yes])
if test x$with_libresolv = xyes; then
   AC_CHECK_LIB(resolv, hstrerror)
fi

AC_SUBST(READLINE_SUPPLIB)
AC_CHECK_FUNC(tgetent,
   [READLINE_SUPPLIB=],
   [AC_CHECK_LIB(curses, tgetent,
      [READLINE_SUPPLIB=-lcurses],
      [AC_CHECK_LIB(ncurses, tgetent,
	 [READLINE_SUPPLIB=-lncurses],
	 [AC_CHECK_LIB(termcap, tgetent,
	    [READLINE_SUPPLIB=-ltermcap],
	    [AC_MSG_WARN(No termcap nor curses library found)])
	 ])
      ])
   ])
READLINE_CHECK

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h sys/time.h errno.h stdlib.h varargs.h dirent.h\
 termios.h termio.h sys/select.h sys/poll.h sys/stropts.h string.h memory.h\
 strings.h sys/ioctl.h dlfcn.h resolv.h arpa/nameser.h netinet/tcp.h\
 langinfo.h endian.h regex.h)

# See if the system has strerror, and replace it if not
AC_CHECK_FUNC(strerror, AC_DEFINE(HAVE_STRERROR), LIBOBJS="$LIBOBJS strerror.o")
if test "$ac_cv_func_strerror" = no; then
  # No strerror, so see if the SYS_ERRLIST variable can be used by ours
  AC_CHECK_FUNC(sys_errlist)
  if test "$ac_cv_func_sys_errlist" = yes; then
    IU_CHECK_DECL(sys_errlist, [
      #include <stdio.h>
      #ifdef HAVE_ERRNO_H
      #include <errno.h>
      #endif])
  fi
fi

# See if we have h_errno (the test is here so we can use -lresolv if necessary).
AC_CACHE_CHECK([for h_errno], inetutils_cv_var_h_errno,
  AC_TRY_COMPILE([#include <netdb.h>],
    [ extern int h_errno; int iu_x = h_errno; ],
    inetutils_cv_var_h_errno=yes, inetutils_cv_var_h_errno=no))
if test "$inetutils_cv_var_h_errno" = yes; then
  AC_DEFINE(HAVE_H_ERRNO)
  IU_CHECK_DECL(h_errno, [#include <netdb.h>])
fi

# See if the system has hstrerror, and replace it if not
AC_CHECK_FUNC(hstrerror, , LIBOBJS="$LIBOBJS hstrerror.o")
if test "$ac_cv_func_hstrerror" = yes; then
  IU_CHECK_DECL(hstrerror, [#include <netdb.h>])
else
  # No hstrerror, so see if the H_ERRLIST variable can be used by ours
  AC_CHECK_FUNC(h_errlist)
  if test "$ac_cv_func_h_errlist" = yes; then
    IU_CHECK_DECL(h_errlist, [#include <netdb.h>])
  fi
fi
if test "$ac_cv_func_hstrerror" = yes -o "$ac_cv_func_h_errlist" = yes; then
  # If there's a system hstrerror, or we can reasonably replace it, say so.
  # We still provide some definition, regardless, but this allows people to use
  # a reasonable alternative if the situation allows, rather than using a
  # degenerate version that only says `Host lookup error N'.
  AC_DEFINE(HAVE_HSTRERROR)
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_PID_T
AC_STRUCT_TM

# these are checked by AM_GNU_GETTEXT
dnl AC_C_CONST
dnl AC_C_INLINE
dnl AC_TYPE_OFF_T
dnl AC_TYPE_SIZE_T
if test x$ac_cv_header_endian_h = xno; then
   AC_C_BIGENDIAN
fi
TYPE_SOCKLEN_T

AC_STRUCT_TIMEZONE

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_FUNC_UTIME_NULL
AC_FUNC_GETPGRP
AC_FUNC_VPRINTF
AC_FUNC_FNMATCH
AC_HEADER_STAT
LFTP_FUNC_POLL
LFTP_FUNC_SSCANF_CONST
AC_CHECK_FUNCS(strdup strstr lstat select regexec glob\
 killpg setpgid tcgetattr ftruncate vsnprintf gettimeofday\
 gethostbyname2 getaddrinfo getnameinfo setsid)
IU_CHECK_DECL(vsnprintf, [#include <stdio.h>])

AC_REPLACE_FUNCS(mktime memmove strcasecmp strncasecmp strtol strtoul strptime)
IU_CHECK_DECL(strcasecmp, [#include <string.h>])
IU_CHECK_DECL(strptime, [#include <time.h>])
IU_CHECK_DECL(random, [#include <stdlib.h>])

# always want GNU getopt
LIBOBJS="$LIBOBJS getopt.o getopt1.o"

if test x$lftp_cv_func_poll_works = xno; then
   LIBOBJS="$LIBOBJS poll.o"
   LINK_SRC="$LINK_SRC lib/poll.h"
   LINK_DST="$LINK_DST include/poll.h"
fi
if test x$ac_cv_func_regexec = xno -o x$ac_cv_header_regex_h = xno; then
   LIBOBJS="$LIBOBJS regex.o"
   LINK_SRC="$LINK_SRC lib/regex.h"
   LINK_DST="$LINK_DST include/regex.h"
fi
if test x$ac_cv_func_glob = xno; then
   LIBOBJS="$LIBOBJS glob.o"
   LINK_SRC="$LINK_SRC lib/glob.h"
   LINK_DST="$LINK_DST include/glob.h"
fi
if test x$ac_cv_func_fnmatch_works = xno; then
   LIBOBJS="$LIBOBJS fnmatch.o"
   LINK_SRC="$LINK_SRC lib/fnmatch.h"
   LINK_DST="$LINK_DST include/fnmatch.h"
   AC_DEFINE_UNQUOTED(fnmatch, rpl_fnmatch)
fi

if test "$prefix" = /usr -a "$sysconfdir" = '${prefix}/etc'; then
   sysconfdir=/etc
fi

AC_LINK_FILES($LINK_SRC,$LINK_DST)

dnl Avoid autoconf bug (?)
builtin(define, [AC_OUTPUT_LINKS_ORIG], defn([AC_OUTPUT_LINKS]))
builtin(define, [AC_OUTPUT_LINKS], [AC_OUTPUT_LINKS_ORIG([`echo $1`], [`echo $2`])])

AC_OUTPUT(Makefile src/Makefile lib/Makefile include/Makefile doc/Makefile
	  readline-4.1/Makefile intl/Makefile po/Makefile.in)
